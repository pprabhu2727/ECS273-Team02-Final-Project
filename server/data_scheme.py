"""
Pydantic data models for bird observation and forecasting system.

This module defines the schema for all data structures used in our bird migration
prediction pipeline, from raw eBird observations to ML model forecasts. These models
ensure type safety and automatic validation when interfacing with MongoDB and our API.
"""

from typing import List, Optional
from datetime import datetime
from pydantic import BaseModel, Field, ConfigDict
from bson import ObjectId


class PyObjectId(ObjectId):
    """
    Custom ObjectId class for seamless MongoDB integration with Pydantic.
    
    This wrapper allows us to use MongoDB's native ObjectId type in our Pydantic models
    while maintaining proper validation and JSON serialization. Without this, we'd have
    to manually convert between string and ObjectId types throughout our codebase.
    """
    
    @classmethod
    def __get_validators__(cls):
        yield cls.validate

    @classmethod
    def validate(cls, v, handler=None):
        if not ObjectId.is_valid(v):
            raise ValueError("Invalid ObjectId")
        return ObjectId(v)

    @classmethod
    def __get_pydantic_json_schema__(cls, field_schema):
        field_schema.update(type="string")


class SpeciesListModel(BaseModel):
    """
    Master species list for the dropdown selector in the frontend.
    
    Stores all available bird species with both common and scientific names.
    This is populated once during database initialization and referenced by
    all other collections to ensure consistent species naming.
    """
    
    model_config = ConfigDict(
        populate_by_name=True,
        arbitrary_types_allowed=True,
        json_encoders={ObjectId: str}
    )
    
    id: Optional[PyObjectId] = Field(default=None, alias="_id")
    species: list[str]          # Common names like "Northern Cardinal"
    scientific_names: list[str] # Scientific names like "Cardinalis cardinalis"


class OccurrencePoint(BaseModel):
    """
    Individual bird observation point from eBird data.
    
    Represents a single checklist entry with location, date, and count.
    These are the atomic units that get aggregated into larger patterns
    for visualization and model training.
    """
    
    date: str        # ISO format: "2023-01-15"
    latitude: float  # Decimal degrees
    longitude: float # Decimal degrees  
    count: int       # Number of individuals observed


class SpeciesOccurrenceModel(BaseModel):
    """
    Complete observation history for a single species.
    
    Contains all occurrence points for one species, used primarily for
    training our neural network models. The nested structure allows efficient
    queries by species while maintaining detailed spatial-temporal data.
    """
    
    model_config = ConfigDict(
        populate_by_name=True,
        arbitrary_types_allowed=True,
        json_encoders={ObjectId: str}
    )
    
    id: Optional[PyObjectId] = Field(default=None, alias="_id")
    species: str
    scientific_name: str
    occurrences: List[OccurrencePoint]


class ForecastPoint(BaseModel):
    """
    Neural network prediction for a specific month/year.
    
    Contains both abundance predictions and geographic range boundaries.
    The range values define a bounding box where the species is predicted
    to be most active, useful for migration corridor visualization.
    """
    
    year: int
    month: int
    count_prediction: float # Expected daily average observations
    range_north: float      # Northern extent of predicted range
    range_south: float      # Southern extent of predicted range  
    range_east: float       # Eastern extent of predicted range
    range_west: float       # Western extent of predicted range


class SpeciesForecastModel(BaseModel):
    """
    Future predictions for a species across multiple time periods.
    
    Generated by our trained PyTorch models, these forecasts power the
    forecasting chart component and help researchers understand future
    migration patterns under different climate scenarios.
    """
    
    model_config = ConfigDict(
        populate_by_name=True,
        arbitrary_types_allowed=True,
        json_encoders={ObjectId: str}
    )

    id: Optional[PyObjectId] = Field(default=None, alias="_id")
    species: str
    scientific_name: str
    forecasts: list[ForecastPoint]


class SeasonalDataPoint(BaseModel):
    """
    Statistical summary of observations for a specific month/year.
    
    Pre-computed statistics that power the box plot visualization.
    We calculate these server-side because computing quartiles and outliers
    in JavaScript would be expensive for large datasets.
    """
    
    year: int
    month: int
    average_count: float # Mean daily observations
    median_count: float  # Median daily observations (more robust to outliers)
    max_count: float     # Maximum daily count (upper whisker)
    min_count: float     # Minimum daily count (lower whisker)
    q1_count: float      # First quartile (25th percentile)
    q3_count: float      # Third quartile (75th percentile)


class SpeciesSeasonalModel(BaseModel):
    """
    Historical seasonal patterns for box plot analysis.
    
    Aggregated monthly statistics that reveal migration timing and
    breeding season patterns. This pre-computation significantly speeds up
    the box plot rendering since we don't need to calculate statistics
    on-the-fly from raw occurrence data.
    """
    
    model_config = ConfigDict(
        populate_by_name=True,
        arbitrary_types_allowed=True,
        json_encoders={ObjectId: str}
    )

    id: Optional[PyObjectId] = Field(default=None, alias="_id")
    species: str
    scientific_name: str
    seasonal_data: list[SeasonalDataPoint]


class ClimateGridModel(BaseModel):
    """
    Gridded climate data for environmental context.
    
    PRISM climate data formatted for overlay on our density maps.
    The grid structure matches standard meteorological formats and
    provides the environmental backdrop for understanding bird patterns.
    """
    
    date: str                              # ISO date for the climate data
    source: str                            # Data provider (e.g., "PRISM")
    resolution: str                        # Spatial resolution (e.g., "4km")
    origin: List[float]                    # [lat, lon] of northwest corner
    step: List[float]                      # [lat_step, lon_step] grid spacing
    nodata: float                          # Value indicating missing data
    grid: List[List[Optional[float]]]      # 2D array of climate values


class FlatOccurrenceModel(BaseModel):
    """
    Denormalized occurrence data optimized for fast table queries.
    
    Unlike the nested SpeciesOccurrenceModel, this stores each observation
    as a separate document. This redundancy trades storage space for query
    speed when filtering/sorting large datasets in the data table component.
    """
    
    id: Optional[str] = Field(alias="_id")
    scientific_name: str
    species: str
    date: datetime    # MongoDB datetime object for efficient date queries
    latitude: float
    longitude: float
